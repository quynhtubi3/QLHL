// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLHL.Context;

#nullable disable

namespace QLHL.Migrations
{
    [DbContext(typeof(QLHLContext))]
    [Migration("20231205082008_initalv7")]
    partial class initalv7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QLHL.Datas.Account", b =>
                {
                    b.Property<int>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("accountID"), 1L, 1);

                    b.Property<string>("avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("decentralizationId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resetPasswordToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("resetPasswordTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("accountID");

                    b.HasIndex("decentralizationId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("QLHL.Datas.Answer", b =>
                {
                    b.Property<int>("answerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("answerID"), 1L, 1);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("examID")
                        .HasColumnType("int");

                    b.Property<bool>("rightAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("answerID");

                    b.HasIndex("examID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QLHL.Datas.Course", b =>
                {
                    b.Property<int>("courseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseID"), 1L, 1);

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<string>("courseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("tutorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("courseID");

                    b.HasIndex("tutorID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("QLHL.Datas.CoursePart", b =>
                {
                    b.Property<int>("coursePartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("coursePartID"), 1L, 1);

                    b.Property<int>("amout")
                        .HasColumnType("int");

                    b.Property<int>("courseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("partTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("coursePartID");

                    b.HasIndex("courseID");

                    b.ToTable("CourseParts");
                });

            modelBuilder.Entity("QLHL.Datas.Decentralization", b =>
                {
                    b.Property<int>("decentralizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("decentralizationID"), 1L, 1);

                    b.Property<string>("authorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("decentralizationID");

                    b.ToTable("Decentralizations");
                });

            modelBuilder.Entity("QLHL.Datas.Enrollment", b =>
                {
                    b.Property<int>("enrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("enrollmentID"), 1L, 1);

                    b.Property<int>("courseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("enrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("statusTypeID")
                        .HasColumnType("int");

                    b.Property<int>("studentID")
                        .HasColumnType("int");

                    b.Property<int>("tutorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("enrollmentID");

                    b.HasIndex("statusTypeID");

                    b.HasIndex("studentID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("QLHL.Datas.Exam", b =>
                {
                    b.Property<int>("examID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("examID"), 1L, 1);

                    b.Property<int>("coursePartID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("examName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("examTypeID")
                        .HasColumnType("int");

                    b.Property<double>("minGrade")
                        .HasColumnType("float");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("workTime")
                        .HasColumnType("int");

                    b.HasKey("examID");

                    b.HasIndex("coursePartID");

                    b.HasIndex("examTypeID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("QLHL.Datas.ExamType", b =>
                {
                    b.Property<int>("examTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("examTypeID"), 1L, 1);

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("examTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("examTypeID");

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("QLHL.Datas.Fee", b =>
                {
                    b.Property<int>("feeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feeID"), 1L, 1);

                    b.Property<int>("cost")
                        .HasColumnType("int");

                    b.Property<int>("courseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("studentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("feeID");

                    b.HasIndex("studentID");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("QLHL.Datas.Lecture", b =>
                {
                    b.Property<int>("lectureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lectureID"), 1L, 1);

                    b.Property<int>("coursePartID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("duration")
                        .HasColumnType("int");

                    b.Property<int>("index")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("isWatched")
                        .HasColumnType("bit");

                    b.Property<bool>("isWatching")
                        .HasColumnType("bit");

                    b.Property<string>("lectureLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lectureTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("lectureID");

                    b.HasIndex("coursePartID");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("QLHL.Datas.PaymentHistory", b =>
                {
                    b.Property<int>("paymentHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentHistoryID"), 1L, 1);

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("paymentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("studentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("paymentHistoryID");

                    b.HasIndex("paymentTypeID");

                    b.HasIndex("studentID");

                    b.ToTable("PaymentHistorys");
                });

            modelBuilder.Entity("QLHL.Datas.PaymentType", b =>
                {
                    b.Property<int>("paymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("paymentTypeID"), 1L, 1);

                    b.Property<DateTime>("creatAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("paymentTypeID");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("QLHL.Datas.StatusType", b =>
                {
                    b.Property<int>("statusTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("statusTypeID"), 1L, 1);

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("statusTypeID");

                    b.ToTable("StatusTypes");
                });

            modelBuilder.Entity("QLHL.Datas.Student", b =>
                {
                    b.Property<int>("studentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("studentID"), 1L, 1);

                    b.Property<int>("accountID")
                        .HasColumnType("int");

                    b.Property<int?>("communeID")
                        .HasColumnType("int");

                    b.Property<string>("contactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("districtID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("provinceID")
                        .HasColumnType("int");

                    b.Property<int>("totalMoney")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("studentID");

                    b.HasIndex("accountID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("QLHL.Datas.Submission", b =>
                {
                    b.Property<int>("submissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("submissionID"), 1L, 1);

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("examID")
                        .HasColumnType("int");

                    b.Property<int>("examTimes")
                        .HasColumnType("int");

                    b.Property<int>("grade")
                        .HasColumnType("int");

                    b.Property<int>("studentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("submissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("submissionID");

                    b.HasIndex("studentID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("QLHL.Datas.Tutor", b =>
                {
                    b.Property<int>("tutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tutorID"), 1L, 1);

                    b.Property<int>("accountID")
                        .HasColumnType("int");

                    b.Property<int?>("communeID")
                        .HasColumnType("int");

                    b.Property<string>("contactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("districtID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("provinceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("tutorID");

                    b.HasIndex("accountID");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("QLHL.Datas.TutorAssignment", b =>
                {
                    b.Property<int>("tutorAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tutorAssignmentID"), 1L, 1);

                    b.Property<DateTime>("assignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("courseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberOfStudent")
                        .HasColumnType("int");

                    b.Property<int>("tutorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("tutorAssignmentID");

                    b.HasIndex("tutorID");

                    b.ToTable("TutorAssignments");
                });

            modelBuilder.Entity("QLHL.Datas.VerifyCode", b =>
                {
                    b.Property<int>("verifyCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("verifyCodeID"), 1L, 1);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expiredTime")
                        .HasColumnType("datetime2");

                    b.HasKey("verifyCodeID");

                    b.ToTable("VerifyCodes");
                });

            modelBuilder.Entity("QLHL.Datas.Account", b =>
                {
                    b.HasOne("QLHL.Datas.Decentralization", "Decentralization")
                        .WithMany("Accounts")
                        .HasForeignKey("decentralizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decentralization");
                });

            modelBuilder.Entity("QLHL.Datas.Answer", b =>
                {
                    b.HasOne("QLHL.Datas.Exam", "Exam")
                        .WithMany("Answers")
                        .HasForeignKey("examID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("QLHL.Datas.Course", b =>
                {
                    b.HasOne("QLHL.Datas.Tutor", "tutor")
                        .WithMany()
                        .HasForeignKey("tutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tutor");
                });

            modelBuilder.Entity("QLHL.Datas.CoursePart", b =>
                {
                    b.HasOne("QLHL.Datas.Course", "Course")
                        .WithMany("CourseParts")
                        .HasForeignKey("courseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("QLHL.Datas.Enrollment", b =>
                {
                    b.HasOne("QLHL.Datas.StatusType", "StatusType")
                        .WithMany("Enrollments")
                        .HasForeignKey("statusTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHL.Datas.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QLHL.Datas.Exam", b =>
                {
                    b.HasOne("QLHL.Datas.CoursePart", "CoursePart")
                        .WithMany()
                        .HasForeignKey("coursePartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHL.Datas.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("examTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePart");

                    b.Navigation("ExamType");
                });

            modelBuilder.Entity("QLHL.Datas.Fee", b =>
                {
                    b.HasOne("QLHL.Datas.Student", "Student")
                        .WithMany("Fees")
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QLHL.Datas.Lecture", b =>
                {
                    b.HasOne("QLHL.Datas.CoursePart", "CoursePart")
                        .WithMany("Lectures")
                        .HasForeignKey("coursePartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePart");
                });

            modelBuilder.Entity("QLHL.Datas.PaymentHistory", b =>
                {
                    b.HasOne("QLHL.Datas.PaymentType", "PaymentType")
                        .WithMany("PaymentHistorys")
                        .HasForeignKey("paymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHL.Datas.Student", "Student")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QLHL.Datas.Student", b =>
                {
                    b.HasOne("QLHL.Datas.Account", "Account")
                        .WithMany("Students")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("QLHL.Datas.Submission", b =>
                {
                    b.HasOne("QLHL.Datas.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("studentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("QLHL.Datas.Tutor", b =>
                {
                    b.HasOne("QLHL.Datas.Account", "Account")
                        .WithMany("Tutors")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("QLHL.Datas.TutorAssignment", b =>
                {
                    b.HasOne("QLHL.Datas.Tutor", "Tutor")
                        .WithMany("TutorAssignments")
                        .HasForeignKey("tutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("QLHL.Datas.Account", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Tutors");
                });

            modelBuilder.Entity("QLHL.Datas.Course", b =>
                {
                    b.Navigation("CourseParts");
                });

            modelBuilder.Entity("QLHL.Datas.CoursePart", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("QLHL.Datas.Decentralization", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("QLHL.Datas.Exam", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QLHL.Datas.ExamType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("QLHL.Datas.PaymentType", b =>
                {
                    b.Navigation("PaymentHistorys");
                });

            modelBuilder.Entity("QLHL.Datas.StatusType", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("QLHL.Datas.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Fees");

                    b.Navigation("PaymentHistory");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("QLHL.Datas.Tutor", b =>
                {
                    b.Navigation("TutorAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
